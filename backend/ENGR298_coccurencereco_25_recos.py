
# coding: utf-8

# In[1]:

import numpy as np
import pandas as pd


# In[2]:

movies_input = input('Enter total number of movies cooccured per movie')
movies_each = int(movies_input)


# In[ ]:

#Get no of recommendations to be generated for each user
movies_reco = input('Enter no of recommendations to be generated for each user')
movies_reco_user = int(movies_reco)


# In[4]:

data = pd.read_csv('C:\mm\cooccurence\\ratings_100K\cooccurance_20.csv')


# In[5]:

#print movie-genre information
#print(data)


# In[6]:

#Step 1 - Generate movie-movie matrix
#df1: Columns - 1,2....movies_each (i.e. no of movies specified for each movie)

#df1: Rows - movies

#Creating a new dataframe to hold the data from the file generated by Mahout 
df_movie_movie = pd.DataFrame()


# In[7]:

#df_movie_movie.head()


# In[8]:

#Iterate over data and fill new dataframe df_movie_movie

i = 0
movie_count = 0
for row in data.itertuples():
    movieid = row[1]
    co_movieid = row[2]
    score_1 = row[3]
    #movie_count = 0
    #print('movieid = ' + repr(movieid))
    #print('co_movieid = ' + repr(co_movieid))
    #print('score_1 = ' + repr(score_1))
    if (i == 0):
        if(movie_count == 0):
            #print('i = 0 and movie_count = 0')
            df_movie_movie.at[i,0] = movieid
            movie_count = movie_count + 1
            df_movie_movie.at[i,movie_count] = co_movieid
        elif((movie_count != 0) and (movie_count < movies_each-1)):
            #print('i = 0 and movie_count <= movies_each')
            #print('movie_count = ' + repr(movie_count))
            movie_count = movie_count + 1
            df_movie_movie.at[i,movie_count] = co_movieid
            #movie_count = movie_count + 1
        else:
            #print('i = 0 and movie_count = movies_each - 1')
            #print('movie_count = ' + repr(movie_count))
            movie_count = movie_count + 1
            df_movie_movie.at[i,movie_count] = co_movieid
            i = i + 1
            movie_count = 0
    else:
        if(movie_count == 0):
            #print('i != 0 and movie_count = 0')
            #print('i = ' + repr(i))
            df_movie_movie.at[i,0] = movieid
            movie_count = 1
            df_movie_movie.at[i,movie_count] = co_movieid
        elif(movie_count < movies_each-1):
            #print('i != 0 and movie_count <= movies_each')
            #print('i = ' + repr(i))
            #print('movie_count = ' + repr(movie_count))
            movie_count = movie_count + 1
            df_movie_movie.at[i,movie_count] = co_movieid
            #movie_count = movie_count + 1
        else:
            #print('i != 0 and movie_count = movies_each - 1')
            #print('i = ' + repr(i))
            #print('movie_count = ' + repr(movie_count))
            movie_count = movie_count + 1
            df_movie_movie.at[i,movie_count] = co_movieid
            i = i + 1
            movie_count = 0 
    #print('********************************\n')
    
df_movie_movie[0] = df_movie_movie[0].astype(int)
df_movie_movie.set_index(0)
df_movie_movie.fillna(0, inplace=True)

print('Top Movie Cooccurences\n')
print(df_movie_movie)


# In[9]:

#Read rating file and generate binary rating user x movie matrix
#Rated movies will be 1 and non-rated movies will be 0

rating_data = pd.read_csv('C:\mm\cooccurence\\ratings_100K\\ratings.csv')

#Creating a new dataframe to hold the binary rating matrix
df_binary_rating = pd.DataFrame()

i = 0
for row in rating_data.itertuples():
    userid = row[1]
    movieid = row[2]
    if(row[0] == 0):
        df_binary_rating.at[i,0] = userid
        df_binary_rating.at[i,movieid] = 1
    else:
        prev_userid = df_binary_rating.at[i,0]
        if(prev_userid == userid):
            df_binary_rating.at[i,movieid] = 1
        else:
            i=i+1
            df_binary_rating.at[i,0] = userid
            df_binary_rating.at[i,movieid] = 1
            

df_binary_rating.fillna(0, inplace=True)
df_binary_rating[0] = df_binary_rating[0].astype(int)
df_binary_rating.set_index(0)
#df_binary_rating.apply(pd.to_numeric)
#Sort columns in ascending order of movies
cols = df_binary_rating.columns[df_binary_rating.dtypes.eq('object')]
df_binary_rating[cols] = df_binary_rating[cols].apply(pd.to_numeric, errors='coerce')
#df_binary_rating.reindex_axis(sorted(df_binary_rating.columns), axis=1)
#df_binary_rating.sort([cols], ascending=True)

print('User Binary Rating Matrix\n')
print(df_binary_rating)


# In[10]:

#Get total number of movies. i.e. no of rows in df_movie_movie
tot_movies = df_movie_movie.shape[0]

#Get total number of users. i.e. no of rows in df_binary_rating
tot_users = df_binary_rating.shape[0]

#Get list of all rated movies. i.e. column headers in the user binary rating matric
rated_movies_list = list(df_binary_rating)

#Get list of movies in the cooccurence matrix
cooccurence_movies_list = list(df_movie_movie[0])

#Total movies cooccured with each movie
movies_count = movies_each + 1

#Iterate through user binary rating matrix and generate recommendations

df_cooccur_reco = pd.DataFrame(columns=['userid','movieid1','movieid2'])

rating_rownum = 0
for row in df_binary_rating.itertuples():
    userid = row[1]
    if(userid != 0):
        print('userid = ' + repr(userid))
        #Create temp df to hold all movies rank-wise for a particular user 
        df_temp_movie_rank = pd.DataFrame(columns=['MovieID','Score'])  
        df_temp_final = pd.DataFrame(columns=['MovieID','Score'])  
        cols = tot_movies + 2
        #Iterate through each column of the binary rating matrix 
        #to look up all movies rated by the user
        for j in range(2,cols):
            rating = row[j]
            if(rating == 1):
                #find movieid in this loc(j) in the rated_movies_list to get movieid
                movieid_rated = rated_movies_list[j-1]
                movie_row_index = pd.Index(cooccurence_movies_list)
                movie_row = movie_row_index.get_loc(movieid_rated)
                for i in range(1,movies_count):
                    cooccur_movie = int(df_movie_movie.at[movie_row,i])
                    cooccur_score = (movies_count) - i
                    df_temp_movie_rank = df_temp_movie_rank.append({'MovieID':int(cooccur_movie),'Score':cooccur_score},ignore_index=True)
                    #print('Done\n')
        df_temp_movie_rank = df_temp_movie_rank.groupby(['MovieID']).sum().reset_index()
        df_temp_movie_rank.apply(pd.to_numeric)
        #print('df_temp_movie_rank - All Movies before sort')
        #print(df_temp_movie_rank)
        df_temp_movie_rank = df_temp_movie_rank.sort_values('Score', ascending=False)
        #print('df_temp_movie_rank - All Movies after sort')
        df_temp_movie_rank = df_temp_movie_rank.reset_index(drop=True)
        #print(df_temp_movie_rank)
        #Iterate through all rows of df_temp_movie_rank and delete movies already rated by the user
        movie_count_user = df_temp_movie_rank.shape[0] #Gives the no of rows in df_temp_movie_rank
        for row in df_temp_movie_rank.itertuples():
            movieid = int(row[1])
            score = row[2]
            if(df_binary_rating.at[rating_rownum,movieid] == 0):
                #print('Rating = 0. So append row')
                df_temp_final = df_temp_final.append({'MovieID':int(movieid),'Score':score},ignore_index=True)
        #print('df_temp_final - After deleting watched movies')
        df_temp_final = df_temp_final.sort_values('Score', ascending=False).head(25)['MovieID']
        df_temp_final = df_temp_final.reset_index(drop=True)
        #print('df_temp_final....2 movie recommendations')
        #print(df_temp_final)
        df_cooccur_reco.at[rating_rownum,'userid'] = userid
        movie_1 = df_temp_final.at[0]
        df_cooccur_reco.at[rating_rownum,'movieid1'] = movie_1
        movie_2 = df_temp_final.at[1]
        df_cooccur_reco.at[rating_rownum,'movieid2'] = movie_2
        movie_3 = df_temp_final.at[2]
        df_cooccur_reco.at[rating_rownum,'movieid3'] = movie_3
        movie_4 = df_temp_final.at[3]
        df_cooccur_reco.at[rating_rownum,'movieid4'] = movie_4
        movie_5 = df_temp_final.at[4]
        df_cooccur_reco.at[rating_rownum,'movieid5'] = movie_5
        movie_6 = df_temp_final.at[5]
        df_cooccur_reco.at[rating_rownum,'movieid6'] = movie_6
        movie_7 = df_temp_final.at[6]
        df_cooccur_reco.at[rating_rownum,'movieid7'] = movie_7
        movie_8 = df_temp_final.at[7]
        df_cooccur_reco.at[rating_rownum,'movieid8'] = movie_8
        movie_9 = df_temp_final.at[8]
        df_cooccur_reco.at[rating_rownum,'movieid9'] = movie_9
        movie_10 = df_temp_final.at[9]
        df_cooccur_reco.at[rating_rownum,'movieid10'] = movie_10
        movie_11 = df_temp_final.at[10]
        df_cooccur_reco.at[rating_rownum,'movieid11'] = movie_11
        movie_12 = df_temp_final.at[11]
        df_cooccur_reco.at[rating_rownum,'movieid12'] = movie_12
        movie_13 = df_temp_final.at[12]
        df_cooccur_reco.at[rating_rownum,'movieid13'] = movie_13
        movie_14 = df_temp_final.at[13]
        df_cooccur_reco.at[rating_rownum,'movieid14'] = movie_14
        movie_15 = df_temp_final.at[14]
        df_cooccur_reco.at[rating_rownum,'movieid15'] = movie_15
        movie_16 = df_temp_final.at[15]
        df_cooccur_reco.at[rating_rownum,'movieid16'] = movie_16
        movie_17 = df_temp_final.at[16]
        df_cooccur_reco.at[rating_rownum,'movieid17'] = movie_17
        movie_18 = df_temp_final.at[17]
        df_cooccur_reco.at[rating_rownum,'movieid18'] = movie_18
        movie_19 = df_temp_final.at[18]
        df_cooccur_reco.at[rating_rownum,'movieid19'] = movie_19
        movie_20 = df_temp_final.at[19]
        df_cooccur_reco.at[rating_rownum,'movieid20'] = movie_20
        movie_21 = df_temp_final.at[20]
        df_cooccur_reco.at[rating_rownum,'movieid21'] = movie_21
        movie_22 = df_temp_final.at[21]
        df_cooccur_reco.at[rating_rownum,'movieid22'] = movie_22
        movie_23 = df_temp_final.at[22]
        df_cooccur_reco.at[rating_rownum,'movieid23'] = movie_23
        movie_24 = df_temp_final.at[23]
        df_cooccur_reco.at[rating_rownum,'movieid24'] = movie_24
        movie_25 = df_temp_final.at[24]
        df_cooccur_reco.at[rating_rownum,'movieid25'] = movie_25
        #print('shape of df_temp_final = ' + repr(df_temp_final.shape[0]))
        #if(df_temp_final.shape[0] > 1):
            #movie_2 = df_temp_final.at[1]
            #df_cooccur_reco.at[rating_rownum,'movieid2'] = movie_2
        #print('userid = ' + repr(userid))
        #print('movie_1 = ' + repr(movie_1))
        #print('movie_2 = ' + repr(movie_2))
        rating_rownum = rating_rownum + 1
        #print('***************************\n')
            
print('****Final Matrix****')
df_cooccur_reco.fillna(0, inplace=True)
#print(df_cooccur_reco)


# In[11]:

#Inserting into database
#df_cooccur_reco = pd.DataFrame(columns=['movieid1','movieid2'])


# In[12]:

#Connect to database and insert into table
#Import dataframe into MySQL

import sqlalchemy
from sqlalchemy import create_engine
import pymysql

database_username = 'ba0dd49e70befd'
database_password = 'e8e0885d'
database_ip       = 'us-cdbr-iron-east-05.cleardb.net'
database_name     = 'heroku_54c3b520208a1ef'
database_connection = sqlalchemy.create_engine('mysql+pymysql://{0}:{1}@{2}/{3}'.
                                               format(database_username, database_password,database_ip, database_name))


# In[13]:

df_cooccur_reco['userid'] = df_cooccur_reco['userid'].astype('str')
df_cooccur_reco['movieid1'] = df_cooccur_reco['movieid1'].astype('str')
df_cooccur_reco['movieid2'] = df_cooccur_reco['movieid2'].astype('str')
df_cooccur_reco['movieid3'] = df_cooccur_reco['movieid3'].astype('str')
df_cooccur_reco['movieid4'] = df_cooccur_reco['movieid4'].astype('str')
df_cooccur_reco['movieid5'] = df_cooccur_reco['movieid5'].astype('str')
df_cooccur_reco['movieid6'] = df_cooccur_reco['movieid6'].astype('str')
df_cooccur_reco['movieid7'] = df_cooccur_reco['movieid7'].astype('str')
df_cooccur_reco['movieid8'] = df_cooccur_reco['movieid8'].astype('str')
df_cooccur_reco['movieid9'] = df_cooccur_reco['movieid9'].astype('str')
df_cooccur_reco['movieid10'] = df_cooccur_reco['movieid10'].astype('str')
df_cooccur_reco['movieid11'] = df_cooccur_reco['movieid11'].astype('str')
df_cooccur_reco['movieid12'] = df_cooccur_reco['movieid12'].astype('str')
df_cooccur_reco['movieid13'] = df_cooccur_reco['movieid13'].astype('str')
df_cooccur_reco['movieid14'] = df_cooccur_reco['movieid14'].astype('str')
df_cooccur_reco['movieid15'] = df_cooccur_reco['movieid15'].astype('str')
df_cooccur_reco['movieid16'] = df_cooccur_reco['movieid16'].astype('str')
df_cooccur_reco['movieid17'] = df_cooccur_reco['movieid17'].astype('str')
df_cooccur_reco['movieid18'] = df_cooccur_reco['movieid18'].astype('str')
df_cooccur_reco['movieid19'] = df_cooccur_reco['movieid19'].astype('str')
df_cooccur_reco['movieid20'] = df_cooccur_reco['movieid20'].astype('str')
df_cooccur_reco['movieid21'] = df_cooccur_reco['movieid21'].astype('str')
df_cooccur_reco['movieid22'] = df_cooccur_reco['movieid22'].astype('str')
df_cooccur_reco['movieid23'] = df_cooccur_reco['movieid23'].astype('str')
df_cooccur_reco['movieid24'] = df_cooccur_reco['movieid24'].astype('str')
df_cooccur_reco['movieid25'] = df_cooccur_reco['movieid25'].astype('str')
df_cooccur_reco = df_cooccur_reco.reset_index(drop=True)


# In[14]:

df_cooccur_reco.to_sql(cooccurence_reco_25,con=database_connection, name='cooccurence_reco_25', if_exists='replace',flavor='mysql')


# In[ ]:



